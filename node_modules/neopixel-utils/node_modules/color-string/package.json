{
  "name": "color-string",
  "description": "Parser and generator for CSS color strings",
  "version": "1.5.2",
  "author": {
    "name": "Heather Arthur",
    "email": "fayearthur@gmail.com"
  },
  "contributors": [
    {
      "name": "Maxime Thirouin"
    },
    {
      "name": "Dyma Ywanov",
      "email": "dfcreative@gmail.com"
    },
    {
      "name": "Josh Junon"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Qix-/color-string"
  },
  "scripts": {
    "pretest": "xo",
    "test": "node test/basic.js"
  },
  "license": "MIT",
  "files": [
    "index.js"
  ],
  "xo": {
    "rules": {
      "no-cond-assign": 0,
      "operator-linebreak": 0
    }
  },
  "dependencies": {
    "color-name": "^1.0.0",
    "simple-swizzle": "^0.2.2"
  },
  "devDependencies": {
    "xo": "^0.12.1"
  },
  "keywords": [
    "color",
    "colour",
    "rgb",
    "css"
  ],
  "readme": "# color-string\n\n[![Build Status](https://travis-ci.org/Qix-/color-string.svg?branch=master)](https://travis-ci.org/Qix-/color-string)\n\n> library for parsing and generating CSS color strings.\n\n## Install\n\nWith [npm](http://npmjs.org/):\n\n```console\n$ npm install color-string\n```\n\n## Usage\n\n### Parsing\n\n```js\ncolorString.get('#FFF')                          // {model: 'rgb', value: [255, 255, 255, 1]}\ncolorString.get('#FFFA')                         // {model: 'rgb', value: [255, 255, 255, 0.67]}\ncolorString.get('#FFFFFFAA')                     // {model: 'rgb', value: [255, 255, 255, 0.67]}\ncolorString.get('hsl(360, 100%, 50%)')           // {model: 'hsl', value: [0, 100, 50, 1]}\ncolorString.get('hwb(60, 3%, 60%)')              // {model: 'hwb', value: [60, 3, 60, 1]}\n\ncolorString.get.rgb('#FFF')                      // [255, 255, 255, 1]\ncolorString.get.rgb('blue')                      // [0, 0, 255, 1]\ncolorString.get.rgb('rgba(200, 60, 60, 0.3)')    // [200, 60, 60, 0.3]\ncolorString.get.rgb('rgb(200, 200, 200)')        // [200, 200, 200, 1]\n\ncolorString.get.hsl('hsl(360, 100%, 50%)')       // [0, 100, 50, 1]\ncolorString.get.hsl('hsla(360, 60%, 50%, 0.4)')  // [0, 60, 50, 0.4]\n\ncolorString.get.hwb('hwb(60, 3%, 60%)')          // [60, 3, 60, 1]\ncolorString.get.hwb('hwb(60, 3%, 60%, 0.6)')     // [60, 3, 60, 0.6]\n\ncolorString.get.rgb('invalid color string')      // null\n```\n\n### Generation\n\n```js\ncolorString.to.hex([255, 255, 255])     // \"#FFFFFF\"\ncolorString.to.hex([0, 0, 255, 0.4])    // \"#0000FF66\"\ncolorString.to.hex([0, 0, 255], 0.4)    // \"#0000FF66\"\ncolorString.to.rgb([255, 255, 255])     // \"rgb(255, 255, 255)\"\ncolorString.to.rgb([0, 0, 255, 0.4])    // \"rgba(0, 0, 255, 0.4)\"\ncolorString.to.rgb([0, 0, 255], 0.4)    // \"rgba(0, 0, 255, 0.4)\"\ncolorString.to.rgb.percent([0, 0, 255]) // \"rgb(0%, 0%, 100%)\"\ncolorString.to.keyword([255, 255, 0])   // \"yellow\"\ncolorString.to.hsl([360, 100, 100])     // \"hsl(360, 100%, 100%)\"\ncolorString.to.hwb([50, 3, 15])         // \"hwb(50, 3%, 15%)\"\n\n// all functions also support swizzling\ncolorString.to.rgb(0, [0, 255], 0.4)    // \"rgba(0, 0, 255, 0.4)\"\ncolorString.to.rgb([0, 0], [255], 0.4)  // \"rgba(0, 0, 255, 0.4)\"\ncolorString.to.rgb([0], 0, [255, 0.4])  // \"rgba(0, 0, 255, 0.4)\"\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Qix-/color-string/issues"
  },
  "homepage": "https://github.com/Qix-/color-string",
  "_id": "color-string@1.5.2",
  "_from": "color-string@>=1.2.0"
}
